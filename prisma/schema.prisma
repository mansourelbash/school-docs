generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 🧾 Enum لتحديد أدوار المستخدمين
enum UserRoleEnum {
  ADMIN
  TEACHER
  VIEWER
  STUDENT
}

model School {
  id        String    @id @default(cuid())
  name      String    @unique
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  users     User[]
  documents Document[]

  @@map("schools")
}

model User {
  id          String     @id @default(cuid())
  email       String     @unique
  password    String
  name        String
  image       String?
  role        UserRoleEnum @default(VIEWER)  // ✅ الآن نستخدم Enum
  department  String?
  permissions Json?
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  updated_at  DateTime?  @default(now()) @db.Timestamp(6)

  schoolId    String
  school      School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  user_roles  UserRole[] // إذا كنت تستخدم جدول أدوار إضافي

  @@map("users")
}

model UserRole {
  id          String    @id @default(cuid())
  user_id     String?
  role        String
  permissions Json?
  assigned_by String?
  assigned_at DateTime? @default(now()) @db.Timestamp(6)
  expires_at  DateTime? @db.Timestamp(6)
  users       User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("user_roles")
}

model MainCategory {
  id            String        @id @default(cuid())
  name          String        @unique
  nameAr        String        @unique
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  documents     Document[]
  subCategories SubCategory[]

  @@map("main_categories")
}

model SubCategory {
  id             String       @id @default(cuid())
  name           String
  nameAr         String
  description    String?
  mainCategoryId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  documents      Document[]
  mainCategory   MainCategory @relation(fields: [mainCategoryId], references: [id], onDelete: Cascade)

  @@unique([name, mainCategoryId])
  @@unique([nameAr, mainCategoryId])
  @@map("sub_categories")
}

model Document {
  id             String       @id @default(cuid())
  title          String
  titleAr        String
  description    String?
  descriptionAr  String?
  fileName       String
  originalName   String
  filePath       String
  fileSize       Int
  mimeType       String
  fileExtension  String
  uploadDate     DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  mainCategoryId String
  subCategoryId  String?
  cloudinaryId   String?
  cloudinaryUrl  String?

  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  isPublic       Boolean      @default(false) 

  mainCategory   MainCategory @relation(fields: [mainCategoryId], references: [id], onDelete: Cascade)
  subCategory    SubCategory? @relation(fields: [subCategoryId], references: [id])

  @@map("documents")
}
